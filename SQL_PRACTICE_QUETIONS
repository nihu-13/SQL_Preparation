//Creating table Student

CREATE TABLE Student (
    STUDENT_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(30),
    LAST_NAME VARCHAR(30),
    GPA DOUBLE,
    ENROLLMENT_DATE DATETIME,
    MAJOR VARCHAR(30)
);

//Insert data
INSERT INTO Student (STUDENT_ID, FIRST_NAME, LAST_NAME, GPA, ENROLLMENT_DATE, MAJOR)
VALUES
(201, 'Shivansh', 'Mahajan', 8.79, '2021-09-01 09:30:00', 'Computer Science'),
(202, 'Umesh', 'Sharma', 8.44, '2021-09-01 08:30:00', 'Mathematics'),
(203, 'Rakesh', 'Kumar', 5.60, '2021-09-01 10:00:00', 'Biology'),
(204, 'Radha', 'Sharma', 9.20, '2021-09-01 12:45:00', 'Chemistry'),
(205, 'Kush', 'Kumar', 7.85, '2021-09-01 08:30:00', 'Physics'),
(206, 'Prem', 'Chopra', 9.56, '2021-09-01 09:24:00', 'History'),
(207, 'Pankaj', 'Vats', 9.78, '2021-09-01 02:30:00', 'English'),
(208, 'Navleen', 'Kaur', 7.00, '2021-09-01 06:30:00', 'Mathematics');


//Creating program table and link them through foreign key
CREATE TABLE Program (
    STUDENT_REF_ID INT,
    PROGRAM_NAME VARCHAR(30),
    PROGRAM_START_DATE DATETIME,
    FOREIGN KEY (STUDENT_REF_ID) REFERENCES Student(STUDENT_ID)
);

INSERT INTO Program (STUDENT_REF_ID, PROGRAM_NAME, PROGRAM_START_DATE)
VALUES
(201, 'Computer Science', '2021-09-01 00:00:00'),
(202, 'Mathematics', '2021-09-01 00:00:00'),
(208, 'Mathematics', '2021-09-01 00:00:00'),
(205, 'Physics', '2021-09-01 00:00:00'),
(204, 'Chemistry', '2021-09-01 00:00:00'),
(207, 'Psychology', '2021-09-01 00:00:00'),
(206, 'History', '2021-09-01 00:00:00'),
(203, 'Biology', '2021-09-01 00:00:00');


//Creating scholarship table and link them through foreign key

CREATE TABLE Program (
    STUDENT_REF_ID INT,
    AMOUNT INT,
    SCHOLARSHIP_DATE DATETIME,
    FOREIGN KEY (STUDENT_REF_ID) REFERENCES Student(STUDENT_ID)
);

INSERT INTO schoolershipe (STUDENT_ID, AMOUNT, SCHOLARSHIP_DATE)
VALUES
(201, 5000, '2021-10-15 00:00:00'),
(202, 4500, '2022-08-18 00:00:00'),
(203, 3000, '2022-01-25 00:00:00'),
(201, 4000, '2021-10-15 00:00:00');

1. Write a SQL query to fetch “FIRST_NAME” from the Student table in upper case and use ALIAS name as STUDENT_NAME.
SELECT upper(FIRST_NAME) as STUDENT_NAME from Student;

2. Write a SQL query to fetch unique values of MAJOR Subjects from Student table.
SELECT DISTINCT MAJOR from STUDENT; 
or
SELECT MAJOR FROM STUDENT GROUP BY(MAJOR);

3. Write a SQL query to print the first 3 characters of FIRST_NAME from Student table.
SELECT SUBSTRING(FIRST_NAME, 1, 3)  FROM Student;

4. Write a SQL query to find the position of alphabet (‘a’) int the first name column ‘Shivansh’ from Student table.
SELECT INSTR(FIRST_NAME, 'a') FROM Student WHERE FIRST_NAME = 'Shivansh'; 

5. Write a SQL query that fetches the unique values of MAJOR Subjects from Student table and print its length.
SELECT MAJOR,LENGTH(MAJOR) FROM Student GROUP BY(MAJOR);                                                         
or                                                                                                                                                                                                                 
SELECT DISTINCT MAJOR, LENGTH(MAJOR) FROM Student; 

6. Write a SQL query to print FIRST_NAME from the Student table after replacing ‘a’ with ‘A’.
SELECT REPLACE(FIRST_NAME, 'a', 'A') FROM Student;

7. Write a SQL query to print the FIRST_NAME and LAST_NAME from Student table into single column COMPLETE_NAME.
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS COMPLETE_NAME FROM Student;
or
SELECT FIRST_NAME||' '||LAST_NAME AS COMPLETE_NAME FROM Student;

8. Write a SQL query to print all Student details from Student table order by FIRST_NAME Ascending and MAJOR Subject descending .
SELECT * FROM Student ORDER BY FIRST_NAME , MAJOR DESC;

9. Write a SQL query to print details of the Students with the FIRST_NAME as ‘Prem’ and ‘Shivansh’ from Student table.
SELECT * from Student WHERE FIRST_NAME IN ('Prem' , 'Shivansh');

10. Write a SQL query to print details of the Students excluding FIRST_NAME as ‘Prem’ and ‘Shivansh’ from Student table.
SELECT * from Student WHERE FIRST_NAME NOT IN ('Prem', 'Shivansh');

11) Write a SQL query to print details of the Students whose FIRST_NAME ends with ‘a’.
SELECT * FROM Student WHERE FIRST_NAME LIKE '%a';

12. Write an SQL query to print details of the Students whose FIRST_NAME ends with ‘a’ and contains six alphabets.
SELECT * FROM Student WHERE FIRST_NAME LIKE '%_____a';

13. Write an SQL query to print details of the Students whose GPA lies between 9.00 and 9.99.
SELECT * FROM Student WHERE GPA BETWEEN 9.00 AND 9.99;

14. Write an SQL query to fetch the count of Students having Major Subject ‘Computer Science’.
SELECT Major, COUNT(*) as TOTAL_COUNT FROM Student WHERE MAJOR = 'Computer Science';

15. Write an SQL query to fetch Students full names with GPA >= 8.5 and <= 9.5.
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME FROM Student WHERE GPA BETWEEN 8.5 and 9.5;
or
SELECT FIRST_NAME||' '||LAST_NAME AS FULL_NAME FROM Student WHERE GPA BETWEEN 8.5 and 9.5;

16. Write an SQL query to fetch the no. of Students for each MAJOR subject in the descending order.
SELECT MAJOR, COUNT(MAJOR) from Student group by MAJOR order by COUNT(MAJOR);
or
SELECT MAJOR, COUNT(*) as TOTAL_COUNT from Student group by MAJOR order by TOTAL_COUNT;

17. Display the details of students who have received scholarships, including their names, scholarship amounts, and scholarship dates.
select s.FIRST_NAME,s1.SCHOLARSHIP_AMOUNT,s1.SCHOLARSHIP_DATE
from Student as s INNER JOIN Scholarship as s1 ON
s1.STUDENT_REF_ID=s.STUDENT_ID;

18. Write an SQL query to show only odd rows from Student table.
SELECT * FROM Student WHERE student_id % 2 != 0;
or
SELECT * FROM Student WHERE MOD(student_id % 2)= 1; // MOD(student_id % 2)<>0;

19. Write an SQL query to show only even rows from Student table.
SELECT * FROM Student WHERE student_id % 2 = 0;
or
SELECT * FROM Student WHERE MOD(student_id % 2)= 0;

20. List all students and their scholarship amounts if they have received any. If a student has not received a scholarship, display NULL for the scholarship details
select
   s.*,
   CASE WHEN s1.SCHOLARSHIP_AMOUNT IS NULL THEN "NULL" ELSE s1.SCHOLARSHIP_AMOUNT  END as SCHOLARSHIP_AMOUNT
from 
   Student as s 
LEFT JOIN 
   Scholarship as s1 ON s1.STUDENT_REF_ID=s.STUDENT_ID;
or
SELECT 
    Student.FIRST_NAME,
    Student.LAST_NAME,
    COALESCE(Scholarship.SCHOLARSHIP_AMOUNT, NULL) AS SCHOLARSHIP_AMOUNT,
    COALESCE(Scholarship.SCHOLARSHIP_DATE, NULL) AS SCHOLARSHIP_DATE
FROM 
    Student
LEFT JOIN 
    Scholarship ON Student.STUDENT_ID = Scholarship.STUDENT_REF_ID;

21. Write an SQL query to show the top n (say 5) records of Student table order by descending GPA.
SELECT * from Student ORDER BY GPA DESC LIMIT 5;
or
select * from Student  Where GPA IN(select DISTINCT(GPA) from Student as s1 WHERE 4>=(select Count(s2.GPA) from Student as s2 where s2.GPA >s1.GPA ) )ORDER BY(GPA) DESC;

22. Write an SQL query to determine the nth (say n=5) highest GPA from a table.
select * from Student as s1 
WHERE 5=(
   select Count(DISTINCT(s2.GPA)) 
   from Student as s2 
   where s2.GPA >s1.GPA 
);
or 
SELECT * FROM Student ORDER BY GPA DESC LIMIT 5, 1;

23. Write an SQL query to determine the 5th highest GPA without using LIMIT keyword.
SELECT * FROM Student s1 
WHERE 4 = (
    SELECT COUNT(DISTINCT (s2.GPA)) 
    FROM Student s2
    WHERE s2.GPA >= s1.GPA
);

24. Write an SQL query to fetch the list of Students with the same GPA.
SELECT s1.* FROM Student s1, Student s2 WHERE s1.GPA = s2.GPA AND s1.Student_id != s2.Student_id;
or
SELECT s1.* FROM Student s1, Student s2 WHERE s1.GPA = s2.GPA AND s1.Student_id <> s2.Student_id;

25. Write an SQL query to show the second highest GPA from a Student table using sub-query.
SELECT MAX(GPA) FROM Student
WHERE GPA NOT IN(SELECT MAX(GPA) FROM Student);
or
SELECT * FROM Student s1 
WHERE 2 = (
    SELECT COUNT(DISTINCT (s2.GPA)) 
    FROM Student s2
    WHERE s2.GPA >= s1.GPA
);
or 
SELECT * FROM Student WHERE GPA IN (SELECT MAX(GPA) FROM Student
WHERE GPA NOT IN(SELECT MAX(GPA) FROM Student));

26. Write an SQL query to show one row twice in results from a table.
SELECT * FROM Student 
UNION ALL
SELECT * FROM Student ORDER BY STUDENT_ID;

27. Write an SQL query to list STUDENT_ID who does not get Scholarship.
SELECT STUDENT_ID FROM Student 
WHERE STUDENT_ID NOT IN (SELECT STUDENT_REF_ID FROM Scholarship);
or
//WIth Entire Details
SELECT * FROM Student 
WHERE STUDENT_ID NOT IN (SELECT STUDENT_REF_ID FROM Scholarship);

28. Write an SQL query to fetch the first 50% records from a table.
select * from Student WHERE STUDENT_ID<=(select COUNT(*) * 0.5  from Student); 
or
select * from Student WHERE STUDENT_ID<=(select COUNT(STUDENT_ID/2) from Student); 
or
select * from Student order by STUDENT_ID limit 4; 

29. Write an SQL query to fetch the MAJOR subject that have less than 4 people in it.
SELECT MAJOR, COUNT(MAJOR) AS MAJOR_COUNT FROM Student GROUP BY MAJOR HAVING COUNT(MAJOR) < 4;
or
SELECT MAJOR FROM Student GROUP BY MAJOR HAVING COUNT(*) < 4;
or
SELECT DISTINCT MAJOR
FROM Student
WHERE MAJOR NOT IN (
    SELECT MAJOR
    FROM Student
    GROUP BY MAJOR
    HAVING COUNT(*) >= 4
);

30. Write an SQL query to show all MAJOR subject along with the number of people in there.
select MAJOR,COUNT(MAJOR) as TOTAL
from Student GROUP BY MAJOR ;
or
select MAJOR,COUNT(*) as TOTAL
from Student GROUP BY MAJOR ;

31. Write an SQL query to show the last record from a table.
select * from Student WHERE STUDENT_ID=(SELECT MAX(STUDENT_ID) FROM Student) ; 

32. Write an SQL query to fetch the first row of a table.
select * from Student WHERE STUDENT_ID=(SELECT MIN(STUDENT_ID) FROM Student) ; 

33. Write an SQL query to fetch the last five records from a table.
SELECT * 
FROM (
    SELECT * 
    FROM Student 
    ORDER BY STUDENT_ID DESC 
    LIMIT 5
) AS subquery
ORDER BY STUDENT_ID; 
or
select *
from 
  Student as s1 
WHERE 4>=(
    SELECT COUNT(DISTINCT(STUDENT_ID)) 
    FROM Student as s2 
    WHERE s1.STUDENT_ID<s2.STUDENT_ID
); 

34. Write an SQL query to fetch three max GPA from a table using co-related subquery.
SELECT DISTINCT GPA FROM Student S1 
WHERE 3 >= (SELECT COUNT(DISTINCT GPA) FROM Student S2 WHERE S1.GPA <= S2.GPA) ORDER BY S1.GPA DESC;
or
select * from Student where GPA IN(SELECT DISTINCT GPA FROM Student S1 
WHERE 3 >= (SELECT COUNT(DISTINCT GPA) FROM Student S2 WHERE S1.GPA <= S2.GPA) )ORDER BY GPA DESC;

35. Write an SQL query to fetch three min GPA from a table using co-related subquery.
SELECT DISTINCT GPA FROM Student S1 
WHERE 3 >= (SELECT COUNT(DISTINCT GPA) FROM Student S2 WHERE S1.GPA >= S2.GPA) ORDER BY S1.GPA DESC;
or
select * from Student where GPA IN(SELECT DISTINCT GPA FROM Student S1 
WHERE 3 >= (SELECT COUNT(DISTINCT GPA) FROM Student S2 WHERE S1.GPA >= S2.GPA) )ORDER BY GPA DESC;

36. Write an SQL query to fetch nth max GPA from a table.
SELECT DISTINCT GPA FROM Student S1 
WHERE n >= (SELECT COUNT(DISTINCT GPA) FROM Student S2 WHERE S1.GPA <= S2.GPA) ORDER BY S1.GPA DESC;

37. Write an SQL query to fetch MAJOR subjects along with the max GPA in each of these MAJOR subjects.
SELECT MAJOR, MAX(GPA) as MAXGPA FROM Student GROUP BY MAJOR;

38. Write an SQL query to fetch the names of Students who has highest GPA.
SELECT FIRST_NAME, GPA FROM Student WHERE GPA = (SELECT MAX(GPA) FROM Student);

39. Write an SQL query to show the current date and time.
Query to get current date : 
SELECT CURDATE();
Query to get current date and time : 
SELECT NOW();
SELECT GETDATE()
SELECT CURRENT_TIMESTAMP AS CurrentDateTime; //FOR MYSQL



40. Write a query to create a new table which consists of data and structure copied from the other table (say Student) or clone the table named Student
CRETAE TABLE CLONETABLE (SELECT * FROM Student);
or
CREATE TABLE CloneTable AS SELECT * FROM Student;


41. Write an SQL query to update the GPA of all the students in ‘Computer Science’ MAJOR subject to 7.5.
UPDATE Student 
SET GPA=7.5 
WHERE MAJOR="Computer Science";

42. Write an SQL query to find the average GPA for each major.
SELECT MAJOR, AVG(GPA) AS AVERAGE_GPA FROM Student GROUP BY MAJOR;

43. Write an SQL query to show the top 3 students with the highest GPA.
SELECT * FROM Student ORDER BY GPA DESC LIMIT 3;
or
select * from Student where GPA IN(SELECT DISTINCT GPA FROM Student S1 
WHERE 3 >= (SELECT COUNT(DISTINCT GPA) FROM Student S2 WHERE S1.GPA <= S2.GPA) )ORDER BY GPA DESC;

44. Write an SQL query to find the number of students in each major who have a GPA greater than 7.5.
SELECT MAJOR, COUNT(STUDENT_ID) AS HIGH_GPA_COUNT FROM Student WHERE GPA > 7.5 GROUP BY MAJOR;
or 
SELECT MAJOR, COUNT(STUDENT_ID),GPA AS HIGH_GPA_COUNT FROM Student GROUP BY MAJOR HAVING GPA >7.5;


45. Write an SQL query to find the students who have the same GPA as ‘Shivansh Mahajan’.
SELECT * FROM Student WHERE GPA = (SELECT GPA FROM Student WHERE FIRST_NAME = 'Shivansh' 
AND LAST_NAME = 'Mahajan');
